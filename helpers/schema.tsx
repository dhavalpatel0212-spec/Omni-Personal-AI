/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type ActionPriority = "high" | "low" | "medium";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type GoalPriority = "high" | "low" | "medium";

export type GoalStatus = "completed" | "in_progress" | "not_started" | "paused";

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Numeric = ColumnType<string, number | string, number | string>;

export type ShoppingItemCategory = "bakery" | "beverages" | "dairy" | "frozen" | "household" | "meat_seafood" | "other" | "pantry" | "personal_care" | "produce" | "snacks";

export type ShoppingItemPriority = "high" | "low" | "medium";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type TravelGoalPriority = "high" | "low" | "medium";

export type UserRole = "admin" | "user";

export interface AccountSettings {
  analyticsEnabled: Generated<boolean | null>;
  createdAt: Generated<Timestamp | null>;
  currency: Generated<string | null>;
  dataSharing: Generated<boolean | null>;
  id: Generated<number>;
  language: Generated<string | null>;
  marketingEmails: Generated<boolean | null>;
  privacyProfile: Generated<string | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface CalendarConnections {
  accessToken: string;
  calendarId: string | null;
  calendarName: string | null;
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp | null;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  lastSyncAt: Timestamp | null;
  provider: Generated<string>;
  refreshToken: string | null;
  syncToken: string | null;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface CalendarEvents {
  attendees: Generated<Json | null>;
  connectionId: number;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  endTime: Timestamp;
  eventType: Generated<string | null>;
  googleEventId: string;
  id: Generated<number>;
  isAllDay: Generated<boolean | null>;
  isRecurring: Generated<boolean | null>;
  location: string | null;
  meetingUrl: string | null;
  recurringEventId: string | null;
  startTime: Timestamp;
  status: Generated<string | null>;
  syncedAt: Generated<Timestamp | null>;
  title: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
  visibility: Generated<string | null>;
}

export interface CalendarIntegrations {
  accessToken: string | null;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  provider: string;
  providerAccountId: string;
  providerEmail: string | null;
  refreshToken: string | null;
  syncEnabled: Generated<boolean | null>;
  syncFrequency: Generated<string | null>;
  tokenExpiresAt: Timestamp | null;
  twoWaySync: Generated<boolean | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface ChatConversations {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  title: string | null;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface ChatMessages {
  content: string;
  conversationId: number;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  role: string;
}

export interface FeedbackSubmissions {
  actualBehavior: string | null;
  attachments: Generated<Json | null>;
  category: string;
  contactPreference: Generated<boolean>;
  createdAt: Generated<Timestamp | null>;
  description: string;
  deviceInfo: Json | null;
  expectedBehavior: string | null;
  id: Generated<number>;
  issueType: string;
  priority: string;
  status: Generated<string>;
  stepsToReproduce: string | null;
  subject: string;
  ticketId: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface GoalActions {
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  dueDate: Timestamp | null;
  goalId: number;
  id: Generated<number>;
  isCompleted: Generated<boolean | null>;
  priority: Generated<ActionPriority | null>;
  title: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface GoalProgress {
  goalId: number;
  id: Generated<number>;
  loggedAt: Generated<Timestamp | null>;
  notes: string | null;
  progress: number;
}

export interface Goals {
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  dueDate: Timestamp | null;
  id: Generated<number>;
  priority: Generated<GoalPriority | null>;
  progress: Generated<number | null>;
  status: Generated<GoalStatus | null>;
  title: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface LoginAttempts {
  attemptedAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  success: Generated<boolean | null>;
}

export interface MoodLogs {
  createdAt: Generated<Timestamp | null>;
  emoji: string;
  id: Generated<number>;
  loggedAt: Generated<Timestamp | null>;
  moodValue: number;
  notes: string | null;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface NotificationSettings {
  calendarNotifications: Generated<boolean | null>;
  createdAt: Generated<Timestamp | null>;
  emailNotifications: Generated<boolean | null>;
  goalReminders: Generated<boolean | null>;
  id: Generated<number>;
  notificationFrequency: Generated<string | null>;
  pushNotifications: Generated<boolean | null>;
  quietHoursEnabled: Generated<boolean | null>;
  quietHoursEnd: Generated<string | null>;
  quietHoursStart: Generated<string | null>;
  shoppingReminders: Generated<boolean | null>;
  travelNotifications: Generated<boolean | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface OauthAccounts {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  provider: string;
  providerEmail: string;
  providerUserId: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface OauthStates {
  codeVerifier: string;
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: Generated<number>;
  provider: string;
  redirectUrl: string;
  state: string;
}

export interface Sessions {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp | null>;
  userId: number;
}

export interface ShoppingItemCategoryCorrections {
  confidenceScore: Generated<number | null>;
  context: string | null;
  correctedCategory: string;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  itemName: string;
  originalCategory: string | null;
  userId: string;
}

export interface ShoppingItems {
  actualPrice: Numeric | null;
  addedVia: Generated<string | null>;
  category: Generated<ShoppingItemCategory | null>;
  createdAt: Generated<Timestamp>;
  estimatedPrice: Numeric | null;
  id: Generated<string>;
  isCompleted: Generated<boolean>;
  name: string;
  notes: string | null;
  priority: Generated<ShoppingItemPriority | null>;
  quantity: Generated<number | null>;
  shoppingListId: string;
  unit: string | null;
  updatedAt: Generated<Timestamp>;
}

export interface ShoppingLists {
  createdAt: Generated<Timestamp>;
  description: string | null;
  id: Generated<string>;
  isArchived: Generated<boolean>;
  name: string;
  updatedAt: Generated<Timestamp>;
  userId: number;
}

export interface StandaloneActions {
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  dueDate: Timestamp | null;
  id: Generated<number>;
  isCompleted: Generated<boolean | null>;
  priority: ActionPriority | null;
  title: string;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface TravelGoals {
  budget: Numeric;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  destination: string;
  id: string;
  priority: Generated<TravelGoalPriority>;
  targetDate: Timestamp;
  travelers: number;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  passwordHash: string;
  userId: number;
}

export interface UserProfiles {
  billingCycle: Generated<string | null>;
  bio: string | null;
  createdAt: Generated<Timestamp | null>;
  dateOfBirth: Timestamp | null;
  emoji: string | null;
  id: Generated<number>;
  location: string | null;
  phone: string | null;
  phoneCountryCode: Generated<string | null>;
  phoneNumber: Generated<string | null>;
  subscriptionPlan: Generated<string | null>;
  subscriptionStatus: Generated<string | null>;
  timezone: Generated<string | null>;
  updatedAt: Generated<Timestamp | null>;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  role: Generated<UserRole>;
  updatedAt: Generated<Timestamp | null>;
  waitingListStatus: Generated<string | null>;
}

export interface WaitingList {
  approvedAt: Timestamp | null;
  approvedBy: number | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  notes: string | null;
  positionInQueue: number | null;
  requestedAt: Generated<Timestamp | null>;
  status: Generated<string>;
  updatedAt: Generated<Timestamp | null>;
}

export interface WaitingListSettings {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  maxActiveUsers: Generated<number>;
  updatedAt: Generated<Timestamp | null>;
  waitingListEnabled: Generated<boolean>;
}

export interface DB {
  accountSettings: AccountSettings;
  calendarConnections: CalendarConnections;
  calendarEvents: CalendarEvents;
  calendarIntegrations: CalendarIntegrations;
  chatConversations: ChatConversations;
  chatMessages: ChatMessages;
  feedbackSubmissions: FeedbackSubmissions;
  goalActions: GoalActions;
  goalProgress: GoalProgress;
  goals: Goals;
  loginAttempts: LoginAttempts;
  moodLogs: MoodLogs;
  notificationSettings: NotificationSettings;
  oauthAccounts: OauthAccounts;
  oauthStates: OauthStates;
  sessions: Sessions;
  shoppingItemCategoryCorrections: ShoppingItemCategoryCorrections;
  shoppingItems: ShoppingItems;
  shoppingLists: ShoppingLists;
  standaloneActions: StandaloneActions;
  travelGoals: TravelGoals;
  userPasswords: UserPasswords;
  userProfiles: UserProfiles;
  users: Users;
  waitingList: WaitingList;
  waitingListSettings: WaitingListSettings;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const UserRoleArrayValues: [UserRole, ...UserRole[]] = ["admin","user"];
export const GoalStatusArrayValues: [GoalStatus, ...GoalStatus[]] = ["completed","in_progress","not_started","paused"];
export const GoalPriorityArrayValues: [GoalPriority, ...GoalPriority[]] = ["high","low","medium"];
export const ShoppingItemCategoryArrayValues: [ShoppingItemCategory, ...ShoppingItemCategory[]] = ["bakery","beverages","dairy","frozen","household","meat_seafood","other","pantry","personal_care","produce","snacks"];
export const ShoppingItemPriorityArrayValues: [ShoppingItemPriority, ...ShoppingItemPriority[]] = ["high","low","medium"];
export const TravelGoalPriorityArrayValues: [TravelGoalPriority, ...TravelGoalPriority[]] = ["high","low","medium"];
export const ActionPriorityArrayValues: [ActionPriority, ...ActionPriority[]] = ["high","low","medium"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.